```pseudocode
initialize roads as arrays with cars
SECONDS_PER_UPDATE = 0.5
def update():
	for road in Set_of_Roads:
		for car in road.cars[]:
			# from head to bottom
			if car_time > SECONDS_PER_UPDATE:
				car.time = car.time - SECONDS_PER_UPDATE
			else:
				time_left = SECONDS_PER_UPDATE - car.time
                 if car == first_car(road):
                     Pass = decide_whether_can_pass_next_intersection(car)
                     if Pass:
                        time = get_pass_time() # time to get to intersection
                        if time > SECONDS_PER_UPDATE:
                            go_at_current_velocity()
                        else:
                            car = get_to_intersection()
                            time_left = SECONDS_PER_UPDATE - time
                            onBorder = is_out(car)
                            if onBorder:
                                next_road = randomly_choose_an_entrance()
                            else:
                                next_road = randomly_turn()
                            car.time = car.time + turning_time(next_road)
                       else:
                           decelerate()
                   else:
                       Pass = decide_whether_can_pass_next_intersection(car.prev)
                       if Pass:
                           # follow the pattern above
                       else:
                           decelerate()
                           

```

s=[0.6896, 0.7071, 0.7001, 0.7049, 0.6297, 0.7139, 0.6925, 0.6819, 0.6316, 0.6299, 0.6013, 0.6444, 0.5889, 0.6125, 0.5563]

aD=[0.7408, 0.7145, 0.7974, 0.7679, 0.6907, 0.7622, 0.7622, 0.9038, 0.7622, 0.7919, 0.7436, 0.7551, 0.7129, 0.7741, 0.6595]



